// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class mpe {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):mpe {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsmpe(bb:flatbuffers.ByteBuffer, obj?:mpe):mpe {
  return (obj || new mpe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsmpe(bb:flatbuffers.ByteBuffer, obj?:mpe):mpe {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new mpe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

MEANMOTION():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

ECCENTRICITY():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

INCLINATION():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

RAOFASCNODE():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

ARGOFPERICENTER():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

MEANANOMALY():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

NORADCATID():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

BSTAR():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

USERDEFINEDEPOCHTIMESTAMP():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startmpe(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addMEANMOTION(builder:flatbuffers.Builder, MEANMOTION:number) {
  builder.addFieldFloat64(0, MEANMOTION, 0.0);
}

static addECCENTRICITY(builder:flatbuffers.Builder, ECCENTRICITY:number) {
  builder.addFieldFloat64(1, ECCENTRICITY, 0.0);
}

static addINCLINATION(builder:flatbuffers.Builder, INCLINATION:number) {
  builder.addFieldFloat64(2, INCLINATION, 0.0);
}

static addRAOFASCNODE(builder:flatbuffers.Builder, RAOFASCNODE:number) {
  builder.addFieldFloat64(3, RAOFASCNODE, 0.0);
}

static addARGOFPERICENTER(builder:flatbuffers.Builder, ARGOFPERICENTER:number) {
  builder.addFieldFloat64(4, ARGOFPERICENTER, 0.0);
}

static addMEANANOMALY(builder:flatbuffers.Builder, MEANANOMALY:number) {
  builder.addFieldFloat64(5, MEANANOMALY, 0.0);
}

static addNORADCATID(builder:flatbuffers.Builder, NORADCATID:number) {
  builder.addFieldInt32(6, NORADCATID, 0);
}

static addBSTAR(builder:flatbuffers.Builder, BSTAR:number) {
  builder.addFieldFloat64(7, BSTAR, 0.0);
}

static addUSERDEFINEDEPOCHTIMESTAMP(builder:flatbuffers.Builder, USERDEFINEDEPOCHTIMESTAMP:number) {
  builder.addFieldFloat64(8, USERDEFINEDEPOCHTIMESTAMP, 0.0);
}

static endmpe(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static creatempe(builder:flatbuffers.Builder, MEANMOTION:number, ECCENTRICITY:number, INCLINATION:number, RAOFASCNODE:number, ARGOFPERICENTER:number, MEANANOMALY:number, NORADCATID:number, BSTAR:number, USERDEFINEDEPOCHTIMESTAMP:number):flatbuffers.Offset {
  mpe.startmpe(builder);
  mpe.addMEANMOTION(builder, MEANMOTION);
  mpe.addECCENTRICITY(builder, ECCENTRICITY);
  mpe.addINCLINATION(builder, INCLINATION);
  mpe.addRAOFASCNODE(builder, RAOFASCNODE);
  mpe.addARGOFPERICENTER(builder, ARGOFPERICENTER);
  mpe.addMEANANOMALY(builder, MEANANOMALY);
  mpe.addNORADCATID(builder, NORADCATID);
  mpe.addBSTAR(builder, BSTAR);
  mpe.addUSERDEFINEDEPOCHTIMESTAMP(builder, USERDEFINEDEPOCHTIMESTAMP);
  return mpe.endmpe(builder);
}

unpack(): mpeT {
  return new mpeT(
    this.MEANMOTION(),
    this.ECCENTRICITY(),
    this.INCLINATION(),
    this.RAOFASCNODE(),
    this.ARGOFPERICENTER(),
    this.MEANANOMALY(),
    this.NORADCATID(),
    this.BSTAR(),
    this.USERDEFINEDEPOCHTIMESTAMP()
  );
}


unpackTo(_o: mpeT): void {
  _o.MEANMOTION = this.MEANMOTION();
  _o.ECCENTRICITY = this.ECCENTRICITY();
  _o.INCLINATION = this.INCLINATION();
  _o.RAOFASCNODE = this.RAOFASCNODE();
  _o.ARGOFPERICENTER = this.ARGOFPERICENTER();
  _o.MEANANOMALY = this.MEANANOMALY();
  _o.NORADCATID = this.NORADCATID();
  _o.BSTAR = this.BSTAR();
  _o.USERDEFINEDEPOCHTIMESTAMP = this.USERDEFINEDEPOCHTIMESTAMP();
}
}

export class mpeT {
constructor(
  public MEANMOTION: number = 0.0,
  public ECCENTRICITY: number = 0.0,
  public INCLINATION: number = 0.0,
  public RAOFASCNODE: number = 0.0,
  public ARGOFPERICENTER: number = 0.0,
  public MEANANOMALY: number = 0.0,
  public NORADCATID: number = 0,
  public BSTAR: number = 0.0,
  public USERDEFINEDEPOCHTIMESTAMP: number = 0.0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return mpe.creatempe(builder,
    this.MEANMOTION,
    this.ECCENTRICITY,
    this.INCLINATION,
    this.RAOFASCNODE,
    this.ARGOFPERICENTER,
    this.MEANANOMALY,
    this.NORADCATID,
    this.BSTAR,
    this.USERDEFINEDEPOCHTIMESTAMP
  );
}
}
